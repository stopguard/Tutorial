""""""
r"""
x = open('a', 'b', encoding='c') - открытие файла a в режиме чтения/записи b и кодировкой c в переменную x
режимы чтения/записи:
r   - чтение(по умолчению). 
    Если файла нет генерится исключение
r+  - режим редактирования. указатель устанавливается в начало файла. данные пишутся поверх существующих.
    Если файла нет генерится исключение
w   - режим записи. сущ файл стирается
w+  - режим записи и чтения. сущ файл стирается. после записи данных их можно читать
x   - режим записи в новый файл. 
    Если файл существует генерится исключение
a   - режим дозаписи. 
    Если файла нет создаётся новый
a+  - режим дозаписи и чтения. аналогичен a, но позволяет читать данные
t   - текстовый режим(по умолчанию)
b   - бинарный режим

a = x.read()    - чтение полного содержимого файла x в переменную a
x.close()       - закрыть файл
b = a.splitlines()  - разбивает текст на список по абзацам
b = a.readlines()   - создаёт список из содержимого абзацев вместе с управляющими символами
b = x.readline()    - читает из файла очередную строку вместе с управляющими символами

чтение файла через менеджер контекста
with open('a', 'b', encoding='c') as x:
    for line in x:
        print(line)

приветствуется использование менеджера контекста для работы с файлами

x.write(a)          - запись строки a в переменную-файл x
x.writelines(b)     - запись списка строк b в переменную-файл x. 
                    Для переноса строки требуется использовать \n в конце строк
x.tell()            - для получения текущей позиции курсора/указателя
x.seek(a, b=0)      - для изменения текущей позиции курсора/указателя в файле x на a байт
                    - b = 0 для отсчёта от начала файла(по умолчанию)
                    - b = 1 для отсчёта от текущей позиции
                    - b = 2 для отсчёта от конца файла
h = x.readline().strip()    - очистка строки x.readline() от управляющих символов в начале и конце

модуль json
a = json.dumps(b)   - сериализация объекта b в строковый формат данных json в переменную a
b = json.loads(a)   - десериализация строки json a в объект b
json.dump(b, x)     - сериализация объекта b в файл x в формате json
b = json.load(x)    - десериализация содержимого файла x из формата json в объект b

модуль pickle   - аналогичен модулю json но работает с байтовыми строками
                - pickle работает быстрее, данные сохранённые в нём занимают меньше места
                - pickle менее универсален чем json т.к. 
                    - формат сохранения данных зависит от версии фреймворка в котором создан объект
                    - совместим только с python - json работает как минимум ещё и с JS

работа с байтами:
типы данных:
b'string' - bytes она же строка байт, она же                кортеж байт - неизменяемый как и строка/кортеж
bytearray(b'string') - bytearray он же массив байт, он же   список байт - изменяемый как и обычный список
a = 'байты'.encode('utf-8') - возвращает строку преобразованную в строку байт в указанном формате
a = bytes('байты', encoding='utf-8') - преобразовывает входящий объект в строку байт
a = b'\xd0\xb1\xd0\xb0\xd0\xb9\xd1\x82\xd1\x8b'.decode('utf-8') - возвращает строку байт в строку в указанной кодировке
"""