""""""""""
sys.getsizeof(x) - выделенная под объект память в байтах
a = (b ** 2 for b in range(1, 10 ** 6 +1, 2)) - объект генератора занимающий минимум памяти в сравнении со списком, 
                                            но для каждого следующего элемента требуется отдельное вычисление условия
next(a) - вызывает очередной элемент генератора. В результате он удаляется из генератора.
          при проходе по генератору до конца условия генератор истощается и больше не выдаёт значений.
          генератор можно распаковать с помощью * или привести к list() итд
          обращение к произвольному элементу или срезу генератора невозможно
          для работы с генераторами и иттераторами можно использовать модуль itertools
itertools.islice(a, start=0, stop, step=1) - возвращает итератор состоящий из запрощенного среза итератора/генератора. 
                                             Все элементы до stop будут удалены.

другой способ написания функции возвращающей генератор:
def a(b):
    for c in range(1, b + 1, 2):
        yield c ** 2


num_gen = a(10 ** 6)

ord(a) - a должна быть строковым символом. Функция возвращает чар-код символа a
chr(a) - а должна быть Int переменной в пределах таблицы символов. Функция возвращает символ с чар-кодом a

Множества: set
хэш-таблица. как и словарь только без значений.
элементами множеств могут являться только неизменяемые объекты
a = set() - объявление множества
a.add(b) - добавление элемента b в множество a
a.remove(b) - удаление элемента b из множества a. при отсутствии элемента происходит исключение KeyError
a.discard(b) - удаление элемента b из множества a. при отсутствии элемента действие игнорируется

frozenset - неизменяемые множества
то же но с ними не работают методы связанные с изменением множества

частные случаи применения генераторов:
List Comprehensions
a = [генераторное выражение без ()], например:
a = [b for b in c]

Dict Comprehensions
a = {генераторное выражение без ()}, например:
a = {b: b for b in c}

Set Comprehensions
random_nums = {random.randint(1, 100) for _ in range(10)}
"""
