"""""""""
Для поиска модулей Python существует официальный репозиторий:
pypi.org

Перед добавлением пакета оттуда стоит посмотреть дату последнего обновления пакета - есть риск что проект заброшен.

Для установки библиотек используется менеджер пакетов pip

далее будет работа из DOS
для просмотра списка установленных пакетов:
pip freeze

для установки пакета:
pip install <название пакета> например:
pip install requests

для установки конкретной версии пакета:
pip install <название пакета>==<версия пакета> например:
pip install djando==2.2

проверка наличия пакета:
pip show <название пакета>

удаление пакета:
pip uninstall <название пакета>

Виртуальное окружение:
Виртуальное окружение - набор библиотек необходимых для работы.
Хорошей практикой считается создавать для каждого проекта своё виртуальное окружение - так проще переносить на сервер
только необходимые библиотеки.

для создания виртуального окружения:
python -m venv <имя папки для вирт окружения>

для активации окружения требуется запустить 
"<папка вирт окружения>/Scripts/activate.bat"

деактивация виртуального окружения:
deactivate

запускать следует из папки в которой лежит папка вирт окружения
В случае успеха строка в терминале будет начинаться с названия папки вирт окружения в скобках

для записи настроек окружения следует выполнить команду:
pip freeze > requirements.txt

для загрузки настроек окружения на nix сервере выполнить команду
pip3 install -r requirements.txt


МОДУЛИ И ПАКЕТЫ
теперь работаем уже в скрипте pycharm
модуль - любой файл с расширением .py
обычно модуль приложения называют "app.py"
все модули должны именоваться в стиле snake_case

Внутри модуля может находиться блок:
if __name__ == '__main__':
    блок
    
он будет выполняться только при запуске модуля напрямую т.к. переменная __name__ внутри модуля
при импорте будет менять своё значение

Пакет - папка-набор модулей и пакетов в которой присутствует файл __init.py__

Способы импорта:
import requests - импорт модуля/пакета requests полностью
from requests import utils - импорт функции/модуля utils из модуля/пакета requests
import requests as req - импорт модуля/пакета requests с переименованием внутри текущего модуля в req

порядок импорта библиотек:
стандартные
чужие
свои

все импорты располагаем вверху скрипта

Библиотека requests
функция get() выполняет get-запрос к серверу. результат запроса - объект класса Response:
from requests import get
response = get('http://geekbrains.ru')
print(type(response))  # <class 'requests.models.Response'>

атрибут headers     — словарь с заголовками ответа сервера;
атрибут status_code — число, код ответа сервера;
атрибут content     — содержимое ответа;
метод   close()     — освобождает (закрывает) соединение.

пакет utils:
функция utils.get_encoding_from_headers(response.headers) - возвращает кодировку страницы

модуль sys
.argv - переменная в которой список с путём к текущему скрипту и аргументами с которыми был вызван скрипт
argparse - модуль для обработки аргументов запуска .argv

модуль time
.perf_counter() - возвращает время в долях секунды с точкой отсчёта зависящей от системы
                  разность между выполнением до и после кода используется для проверки времени выполнения кода
.perf_counter_ns() - то же, но в наносекундах

модуль datetime:
datetime.datetime() - преобразует переданные данные в именованные аргументы в формат даты-времени:
datetime_1 = datetime.datetime(year=2020, month=12, day=5, hour=18, minute=57, second=30)
у формата даты-времени есть 
атрибуты - years, months итд
datetime.datetime.now() - текущее время
"""
import datetime
a = datetime.datetime(2020, 10, 1)
b = datetime.datetime(2020, 11, 1)
c = b-a
print(c.total_seconds())

